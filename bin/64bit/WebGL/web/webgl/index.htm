<!DOCTYPE html>

<html class="model-page">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-touch-fullscreen" content="yes">
    <title>Inception Project - 3D Viewer</title>

    <link href='https://fonts.googleapis.com/css?family=Roboto:400,100,100italic,300,300italic,400italic,500,500italic,700,700italic,900,900italic|Open+Sans:400,300,300italic,400italic,600,600italic,700,700italic,800,800italic' rel='stylesheet' type='text/css'>

    <!-- Edit -->
    <link rel="apple-touch-icon" sizes="57x57" href="../favicon/apple-icon-57x57.png">
    <link rel="apple-touch-icon" sizes="60x60" href="../favicon/apple-icon-60x60.png">
    <link rel="apple-touch-icon" sizes="72x72" href="../favicon/apple-icon-72x72.png">
    <link rel="apple-touch-icon" sizes="76x76" href="../favicon/apple-icon-76x76.png">
    <link rel="apple-touch-icon" sizes="114x114" href="../favicon/apple-icon-114x114.png">
    <link rel="apple-touch-icon" sizes="120x120" href="../favicon/apple-icon-120x120.png">
    <link rel="apple-touch-icon" sizes="144x144" href="../favicon/apple-icon-144x144.png">
    <link rel="apple-touch-icon" sizes="152x152" href="../favicon/apple-icon-152x152.png">
    <link rel="apple-touch-icon" sizes="180x180" href="../favicon/apple-icon-180x180.png">
    <link rel="icon" type="image/png" sizes="192x192" href="../favicon/android-icon-192x192.png">
    <link rel="icon" type="image/png" sizes="32x32" href="../favicon/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="96x96" href="../favicon/favicon-96x96.png">
    <link rel="icon" type="image/png" sizes="16x16" href="../favicon/favicon-16x16.png">
    <link rel="manifest" href="favicon/manifest.json">
    <meta name="msapplication-TileColor" content="#ffffff">
    <meta name="msapplication-TileImage" content="favicon/ms-icon-144x144.png">
    <meta name="theme-color" content="#ffffff">
    <!-- End Edit -->

    <link href="../css/bootstrap.css" rel="stylesheet">

    <link href="../css/style.css" rel="stylesheet">

    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->

    <link href="../css/bootstrap-theme.min.css" rel="stylesheet">
    <link href="../css/icon-styles.css" rel="stylesheet">

    <style>
        select {
            background-color: black;
            color: #ddd;
        }

        option:checked {
            background: whitesmoke !important;
        }
    </style>

    <script type='text/javascript' src="../jquery-ui-1.11.4.custom/external/jquery/jquery.js"></script>
    <script type='text/javascript' src="../jquery-ui-1.11.4.custom/jquery-ui.js"></script>
    <script type='text/javascript' src="../jstree-3.2.1/jstree.min.js"></script>
    <script type='text/javascript' src='../js/gl-matrix-min.js'></script>
    <script type="text/javascript" src="../snap/snap.min.js"></script>
    <script type="text/javascript" src="../iscroll/iscroll.js"></script>

    <script type="text/javascript" src="../js/gunzip.min.js"></script>
    <script type="text/javascript" src="../js/js.cookie.js"></script>
    <script type='text/javascript' src='../js/utils.js'></script>

    <script type="text/javascript">
        function getParameterByName(name, url) {
            if (!url) url = window.location.href;
            name = name.replace(/[\[\]]/g, '\\$&');
            var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
                results = regex.exec(url);
            if (!results) return null;
            if (!results[2]) return '';
            return decodeURIComponent(results[2].replace(/\+/g, ' '));
        }
    </script>
    <script>
        var p = getParameterByName("path") || "";
        if (p == "")
            p = "geom.js";
        else
            p += "/geom.js";
        document.write("<scr" + "ipt type='text/javascript' src='" + p + "'></scr" + "ipt>");
    </script>
    <script type="text/javascript" src="owl.js"></script>
    <script type="text/javascript" src="settings.js"></script>
    <script type="text/javascript" src="../js/spin.min.js"></script>
    <script type='text/javascript' src='../js/viewer.js'></script>

    <script id="shader-vs" type="x-shader/x-vertex">
        attribute vec4 Position;
        attribute vec3 Normal;
        attribute vec2 UV;

        uniform mat4 ProjectionMatrix;
        uniform mat4 ModelViewMatrix;
        uniform mat3 NormalMatrix;
        uniform vec3 DiffuseMaterial;
        uniform float EnableLighting;
        uniform float EnableTexture;

        varying vec3 EyespaceNormal;
        varying vec3 Diffuse;
        varying float _EnableLighting;
        varying float _EnableTexture;
        varying vec2 _UV;

        void main()
        {
            if (EnableLighting > 0.5)
            {
                EyespaceNormal = NormalMatrix * Normal;
                Diffuse = DiffuseMaterial;
            }

            _EnableLighting = EnableLighting;
            _EnableTexture = EnableTexture;
            _UV = UV;

            gl_Position = ProjectionMatrix * ModelViewMatrix * Position;
            gl_PointSize = 5.0;
        }
    </script>

    <script id="shader-fs" type="x-shader/x-fragment">
        precision highp float;

        varying vec3 EyespaceNormal;
        varying vec3 Diffuse;
        varying float _EnableLighting;
        varying float _EnableTexture;
        varying vec2 _UV;

        uniform vec3 LightPosition;
        uniform vec3 AmbientMaterial;
        uniform vec3 SpecularMaterial;
        uniform float Transparency;
        uniform float Shininess;
        uniform vec3 AmbientLightWeighting;
        uniform vec3 DiffuseLightWeighting;
        uniform vec3 SpecularLightWeighting;
        uniform sampler2D Sampler;

        void main()
        {
            if (_EnableTexture < 0.5)
            {
                if (_EnableLighting > 0.5)
                {
                    vec3 N = normalize(EyespaceNormal);
                    vec3 L = normalize(LightPosition);
                    vec3 E = vec3(0, 0, 1);
                    vec3 H = normalize(L + E);

                    float df = max(0.0, dot(N, L));
                    float sf = max(0.0, dot(N, H));
                    sf = pow(sf, Shininess);

                    vec3 color =
                        (AmbientMaterial * AmbientLightWeighting) +
                        (df * Diffuse * DiffuseLightWeighting) +
                        (sf * SpecularMaterial * SpecularLightWeighting);
                    gl_FragColor = vec4(color, Transparency);
                }
                else
                {
                    gl_FragColor = vec4(AmbientMaterial, 1);
                }
            }
            else
            {
                gl_FragColor = texture2D(Sampler, _UV);
            }
        }
    </script>

    <script id="code-js" type="text/javascript">
        /*
        * Mouse/touch support
        */
        const SELECT_MODE = 0;
        const ZOOM_MODE = 1;
        const ROTATE_MODE = 2;
        const PAN_MODE = 3;
        var g_interactionMode = SELECT_MODE;
        var g_interactionMoveInProgress = false; // Mouse/touch
        var g_startMouseX = -1;
        var g_startmouseY = -1;
        var g_mouseX = -1;
        var g_mouseY = -1;
        var g_zoomStartX = -1;
        var g_zoomStartY = -1;
        var g_touchesDistance = -1;
        var g_oldEyeVector = null;

        /**
        * Event handler - optional
        */
        function onWindowResize() {
            resizeCanvas($('#canvas_container').width(), $('#canvas_container').height());
        }

        /**
        * Event handler - optional
        */
        function onViewerCheckServerStatus() {
        }

        /**
        * Event handler - optional
        */
        function onViewerRender() {
        }

        /**
        * Event handler - optional
        */
        function onViewerDynamicContentLoaded() {
        }

        /**
        * Executes the WebGL application.
        */
        function runWebGLApp() {
            /**
            * Update UI
            */

            /**
            * Next/Previous Pager
            */
            $('#pager_parts').css('display', g_owlParts.length > 0 ? 'block' : 'none');

            /**
            * Init IFCViewer
            */
            g_viewer.init('canvas-element-id', $('#canvas_container').width(), $('#canvas_container').height());

            /**
            * Groups
            */
            var $select = $("#selectGroups");
            $select.find('option').remove();

            for (var i = 0; i < g_groups.length; i++) {
                $select.append($('<option>', {
                    text: g_groups[i],
                    selected: true
                }));
            }

            g_groups.length == 0 ? $("#select-container").hide() : $("#select-container").show();
            g_groups.length == 0 ? $("#button-run").hide() : $("#button-run").show();
        }
    </script>
</head>

<body class="model-page" onload='runWebGLApp()'>
    <nav id="pager_parts" aria-label="pager" class="pagination" style="display: none;">
        <ul class="pager">
            <li onclick="g_viewer.goToPreviousPart();"><a href="#"><i class="wb-icon-arrow-l"></i>Previous Model</a></li>
            <li onclick="g_viewer.goToNextPart();"><a href="#">Next Model<i class="wb-icon-arrow-r"></i></a></li>
        </ul>
    </nav>
    <nav aria-label="pager" class="pagination">
        <ul class="pager">
            <li id="button-run" style="display:none;"><a href="#">Select<i class="wb-icon-arrow-r"></i></a></li>
        </ul>
    </nav>
    <div id='canvas_container' style="height: 100%; width: 100%;">
        <canvas id='canvas-element-id' width='480' height='400' oncontextmenu="return false;">
            Your browser does not support the HTML5 canvas element.
        </canvas>
    </div>

    <div id="select-container" style="width: 22%; position: absolute;">
        <div class="form-group">
            <select id="selectGroups" class="form-control" style="font-size:12px !important" multiple size="10" onchange="onSelectGropus();"><option selected="selected">IfcBuildingElementProxy</option><option selected="selected">IfcDoor</option><option selected="selected">IfcRailing</option><option selected="selected">IfcRoof</option><option selected="selected">IfcSlab</option><option selected="selected">IfcStairFlight</option><option selected="selected">IfcWallStandardCase</option><option selected="selected">IfcWindow</option></select>
        </div>

        <div><button id="selectAll" class="btn btn-default btn-sm" onclick="selectAllGroups();">Select all</button></div>
    </div>

    <div id='divURL' style="height: 20px; width: 50%; right: 0px; top: 0px; position: absolute; visibility: hidden; background-color: aliceblue;">
        INFORMATION
    </div>

    <div id='divProperties' style="height: 20px; width: 50%; left: 0px; bottom: 0px; position: absolute; background-color: white;">
        Properties...
    </div>

    <div id="busy-indicator"></div>

    <script>
        /*
        * Interaction support
        */
        function zoom(zoomIn) {
            try {
                if (!g_interactionMoveInProgress) {
                    return;
                }

                var zoomFactor = zoomIn ? (g_viewer._worldDimensions.MaxDistance * 0.05) : -(g_viewer._worldDimensions.MaxDistance * 0.05);

                var near = [0, 0, 0, 0];
                var far = [0, 0, 0, 0];
                var dir = [0, 0, 0];

                var X = (g_zoomStartX - (gl.canvas.width / 2.0)) / (gl.canvas.width / 2.0);
                var Y = -(g_zoomStartY - (gl.canvas.height / 2.0)) / (gl.canvas.height / 2.0);

                mat4.multiplyVec4(g_viewer._mtxInversePMV, [X, Y, -1.0, 1.0], near);
                vec3.scale(near, 1 / near[3]);

                mat4.multiplyVec4(g_viewer._mtxInversePMV, [X, Y, 0.0, 1.0], far);
                vec3.scale(far, 1 / far[3]);

                // calculate world space view vector
                vec3.subtract(far, near, dir);
                vec3.normalize(dir);
                vec3.scale(dir, zoomFactor);

                // move eye in direction of world space view vector
                vec3.subtract(g_viewer._eyeVector, dir);
            }
            catch (ex) {
                console.error(ex);
            }
        }

        /*
        * Interaction support
        */
        function mouseWheelZoom(zoomIn, zoomX, zoomY, speed) {
            try {
                var zoomFactor = zoomIn ? 0.35 * speed : -0.35 * speed;

                var near = [0, 0, 0, 0];
                var far = [0, 0, 0, 0];
                var dir = [0, 0, 0];

                var X = (zoomX - (gl.canvas.width / 2.0)) / (gl.canvas.width / 2.0);
                var Y = -(zoomY - (gl.canvas.height / 2.0)) / (gl.canvas.height / 2.0);

                mat4.multiplyVec4(g_viewer._mtxInversePMV, [X, Y, -1.0, 1.0], near);
                vec3.scale(near, 1 / near[3]);

                mat4.multiplyVec4(g_viewer._mtxInversePMV, [X, Y, 0.0, 1.0], far);
                vec3.scale(far, 1 / far[3]);

                // calculate world space view vector
                vec3.subtract(far, near, dir);
                vec3.normalize(dir);
                vec3.scale(dir, zoomFactor);

                // move eye in direction of world space view vector
                vec3.subtract(g_viewer._eyeVector, dir);
            }
            catch (ex) {
                console.error(ex);
            }
        }

        /*
        * Interaction support
        */
        function rotate(x, y) {
            if (!g_interactionMoveInProgress) {
                return;
            }

            if ((g_mouseX == -1) || (g_mouseY == -1)) {
                return;
            }

            // Rotate by X
            var rotateX = g_viewer._rotateX + ((y - g_mouseY) / gl.canvas.height) * 360;
            if (rotateX > 360) {
                rotateX = rotateX - 360;
            }
            else {
                if (rotateX < 0) {
                    rotateX = 360 - rotateX;
                }
            }

            g_viewer._rotateX = rotateX;

            // Rotate by Y
            var rotateY = g_viewer._rotateY + ((x - g_mouseX) / gl.canvas.width) * 360;
            if (rotateY > 360) {
                rotateY = rotateY - 360;
            }
            else {
                if (rotateY < 0) {
                    rotateY = 360 - rotateY;
                }
            }

            g_viewer._rotateY = -rotateY;
        }

        /*
        * Interaction support
        */
        function pan(x, y) {
            if (!g_interactionMoveInProgress) {
                return;
            }

            var near = [0, 0, 0, 0];
            var far = [0, 0, 0, 0];
            var dir = [0, 0, 0];

            var X = (x - (gl.canvas.width / 2.0)) / (gl.canvas.width / 2.0);
            var Y = -(y - (gl.canvas.height / 2.0)) / (gl.canvas.height / 2.0);

            mat4.multiplyVec4(g_viewer._mtxInversePMV, [X, Y, -1.0, 1.0], near);
            vec3.scale(near, 1 / near[3]);

            mat4.multiplyVec4(g_viewer._mtxInversePMV, [X, Y, 0.0, 1.0], far);
            vec3.scale(far, 1 / far[3]);

            // calculate world space view vector
            vec3.subtract(far, near, dir);
            vec3.normalize(dir);
            vec3.scale(dir, g_viewer._eyeVector[2]);

            if (g_oldEyeVector != null) {
                // move eye in direction of world space view vector
                var XDiff = dir[0] - g_oldEyeVector[0];
                var YDiff = dir[1] - g_oldEyeVector[1];

                g_viewer._eyeVector[0] -= XDiff;
                g_viewer._eyeVector[1] -= YDiff;
            }

            g_oldEyeVector = dir;
        }

        /*
        * Helper
        */
        function resetInteractionData() {
            g_interactionMode = SELECT_MODE;
            g_interactionMoveInProgress = false;
            g_startMouseX = -1;
            g_startMouseY = -1;
            g_mouseX = -1;
            g_mouseY = -1;
            g_zoomStartX = -1;
            g_zoomStartY = -1;
            g_touchesDistance = -1;
            g_oldEyeVector = null;
        }

        /*
        * Event handler
        */
        function selectAllGroups() {
            var selectedGroups = [];
            $('#selectGroups').find('option').each(function () {
                selectedGroups.push($(this).val());
            });
            $('#selectGroups').val(selectedGroups);
            onSelectGropus();
        }

        function onSelectGropus() {
            var selectedGroups = [];
            $('#selectGroups :selected').each(function (i, selected) {
                selectedGroups.push($(selected).text());
            });

            for (var i = 0; i < g_instances.length; i++) {
                g_instances[i].visible = selectedGroups.indexOf(g_instances[i].group) != -1;
            }
        }

        /*
        * Event handler
        */
        window.addEventListener("load", function (event) {
            /*
                * Event handler
                */
            document.body.addEventListener("touchstart", function (event) {
                try {
                    resetInteractionData();

                    g_interactionMoveInProgress = true;

                    if (event.target instanceof HTMLCanvasElement) {
                        event.preventDefault();

                        /*
                        * Pick
                        */
                        var x = event.touches[0].pageX;
                        var y = event.touches[0].pageY;

                        g_viewer.pickObject(x, y);
                    }

                    g_startMouseX = event.touches[0].pageX;
                    g_startMouseY = event.touches[0].pageY;
                    g_mouseX = event.touches[0].pageX;
                    g_mouseY = event.touches[0].pageY;
                }
                catch (ex) {
                    console.error(ex);
                }
            }, false);

            /*
            * Event handler
            */
            document.body.addEventListener("touchmove", function (event) {
                try {
                    if (event.target instanceof HTMLCanvasElement) {
                        event.preventDefault();
                    }

                    if (event.touches.length >= 2) {
                        /*
                        * Zoom/Pan
                        */
                        var touchesDistance = Math.sqrt(
                            Math.pow(event.touches[1].pageX - event.touches[0].pageX, 2) +
                            Math.pow(event.touches[1].pageY - event.touches[0].pageY, 2));

                        if (g_touchesDistance != -1) {
                            if (Math.abs(touchesDistance - g_touchesDistance) >= 10) {
                                var zoomIn = touchesDistance > g_touchesDistance ? true : false;
                                zoom(zoomIn);
                            }
                            else {
                                pan((event.touches[0].pageX + event.touches[1].pageX) / 2, (event.touches[0].pageY + event.touches[1].pageY) / 2);
                            }
                        } // if (g_touchesDistance != -1)

                        g_touchesDistance = touchesDistance;
                    } // if (event.touches.length >= 2)
                    else {
                        /*
                        * Rotate
                        */
                        rotate(event.touches[0].pageX, event.touches[0].pageY);
                    } // else if (event.touches.length >= 2)

                    g_mouseX = event.touches[0].pageX;
                    g_mouseY = event.touches[0].pageY;
                }
                catch (ex) {
                    console.error(ex);
                }
            }, false);

            /*
            * Event handler
            */
            document.body.addEventListener("touchend", function (event) {
                resetInteractionData();
            }, false);

            /*
            * Event handler
            */
            document.body.addEventListener("touchcancel", function (event) {
                resetInteractionData();
            }, false);
        }, false);

        /*
        * Event handler
        */
        $('#canvas-element-id').mousedown(function (event) {
            try {
                resetInteractionData();

                switch (event.which) {
                    case 1:
                        {
                            g_interactionMode = ROTATE_MODE;

                            /*
                            * URI
                            */
                            try {
                                parent.clearSearch();
                            } catch (e) { }
                            if ((g_viewer._pickedObject != -1) && (g_instances[g_viewer._pickedObject - 1].uri != undefined) && (g_groups.length > 0)) {
                                Cookies.set('selURI', g_instances[g_viewer._pickedObject - 1].uri);
                                if (window.top == window.self) {
                                    $('#button-run').find("a").text("Select");
                                } else {
                                    $('#button-run').find("a").text("Metadata");
                                }
                                $('#button-run').attr("data-uri", Cookies.get('selURI'));
                                $('#button-run').click(function () {
                                    try {
                                        //window.open(window.location.href, "_blank");

                                        if (window.top == window.self) {
                                            window.close();
                                        } else {
                                            parent.showElement($(this).attr("data-uri"));
                                        }
                                    } catch (e) {
                                        window.close();
                                    }

                                });
                            } else {
                                Cookies.set('selURI', '');
                                $("#button-run").attr("data-uri", "");
                                $('#button-run').css('display', 'none');
                                $('#button-run').off("click");
                            }
                        }
                        break;

                    case 2:
                        {
                            g_interactionMode = ZOOM_MODE;
                        }
                        break;

                    case 3:
                        {
                            g_interactionMode = PAN_MODE;
                        }
                        break;
                } // switch (event.which)

                g_interactionMoveInProgress = true;

                g_startMouseX = event.clientX;
                g_startMouseY = event.clientY;
                g_mouseX = event.clientX;
                g_mouseY = event.clientY;
            }
            catch (ex) {
                console.error(ex);
            }
        });

        /*
        * Event handler
        */
        $('#canvas-element-id').mousemove(function (event) {
            switch (g_interactionMode) {
                case SELECT_MODE:
                    {
                        /*
                         * Pick
                         */
                        var x = event.clientX;
                        var y = event.clientY;

                        g_viewer.pickObject(x, y);

                        /*
                        * URI
                        */
                        if (g_viewer._pickedObject != -1) {
                            // URI
                            if ((g_instances[g_viewer._pickedObject - 1].uri != undefined)) {
                                $('#divURL').html(g_instances[g_viewer._pickedObject - 1].uri);
                            }
                            else {
                                $('#divURL').html(g_instances[g_viewer._pickedObject - 1].name +
                                    ' (' + g_instances[g_viewer._pickedObject - 1].group + ')');
                            }

                            // Properties
                            var propertiesHTML = "Name: ";
                            propertiesHTML += g_instances[g_viewer._pickedObject - 1].propertyName;
                            propertiesHTML += ', Description: ';
                            propertiesHTML += g_instances[g_viewer._pickedObject - 1].propertyDescription;
                            propertiesHTML += ', Express ID: ';
                            propertiesHTML += g_instances[g_viewer._pickedObject - 1].propertyExpressID;

                            $('#divProperties').html(propertiesHTML);
                        }
                        else {
                            $('#divURL').html('');
                            $('#divProperties').html('');
                        }
                    }
                    break;

                case ROTATE_MODE:
                    {
                        rotate(event.clientX, event.clientY);
                    }
                    break;

                case ZOOM_MODE:
                    {
                        if ((g_zoomStartX != -1) && (g_zoomStartY != -1)) {
                            if (Math.abs(event.clientX - g_mouseX) != Math.abs(event.clientY - g_mouseY)) {
                                var zoomIn = true;
                                if (Math.abs(event.clientX - g_mouseX) > Math.abs(event.clientY - g_mouseY)) {
                                    zoomIn = event.clientX >= g_mouseX ? true : false;
                                }
                                else {
                                    zoomIn = event.clientY >= g_mouseY ? false : true;
                                }

                                zoom(zoomIn);
                            } // if (Math.abs(event.clientX - g_mouseX) != ...
                        } // if ((g_zoomStartX != -1) && ...
                        else {
                            g_zoomStartX = event.clientX;
                            g_zoomStartY = event.clientY;
                        }
                    }
                    break;

                case PAN_MODE:
                    {
                        pan(event.clientX, event.clientY);
                    }
                    break;
            } // switch (g_interactionMode)

            g_mouseX = event.clientX;
            g_mouseY = event.clientY;
        });

        /*
        * Event handler
        */
        // http://stackoverflow.com/questions/16788995/mousewheel-event-is-not-triggering-in-firefox-browser
        $('#canvas-element-id').on('mousewheel DOMMouseScroll', function (event) {
            if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1) {
                mouseWheelZoom(event.originalEvent.detail < 0, event.originalEvent.clientX, event.originalEvent.clientY, Math.abs(event.originalEvent.detail / 3));
            } else {
                mouseWheelZoom(event.originalEvent.wheelDelta > 0, event.originalEvent.clientX, event.originalEvent.clientY, Math.abs(event.originalEvent.wheelDelta / 120));
            }
        });

        /*
        * Event handler
        */
        $('#canvas-element-id').mouseup(function (event) {
            var x = event.clientX;
            var y = event.clientY;

            if (event.ctrlKey) {
                if (event.altKey) {
                    /*
                    * Reset
                    */
                    g_viewer.reset();
                }
                else {
                    /*
                    * Zoom to
                    */
                    g_viewer.zoomTo(x, y);
                }
            }
            else {
                /*
                * Select
                */
                if ((g_startMouseX == x) && (g_startMouseY == y)) {
                    g_viewer.selectObject(x, y);
                }
            }

            resetInteractionData();
        });

        /*
        * Event handler
        */
        $('#canvas-element-id').mouseleave(function (event) {
            resetInteractionData();
        });

    </script>

</body>
</html>